name: backend-pipeline

on:
  pull_request:
    types: [closed]
    branches: [ "main" ]
    paths:
      - 'back/**'
  workflow_dispatch:

env:
  IMAGE_NAME: back-${{ github.event.repository.name }}
  REGISTRY: ghcr.io

jobs:
# --------------------------------------------------------------------
# 1) PREPARE TAG -----------------------------------------------------
# --------------------------------------------------------------------
  prepare-tag:
    name: 1. Preparar nova tag
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.nova_tag.outputs.nova_tag }}
      tipo:    ${{ steps.tipo.outputs.tipo }}

    steps:
      - uses: actions/checkout@v4

      - name: Instalar GitHub CLI
        run: sudo apt-get install -y gh

      - name: Extrair tipo de mudança da PR
        id: tipo
        run: |
          echo "${{ github.event.pull_request.body }}" > body.txt
      
          tipo=""
          if grep -q "\[x\] marco-no-projeto" body.txt; then
            tipo="marco-no-projeto"
          elif grep -q "\[x\] nova-feature" body.txt; then
            tipo="nova-feature"
          elif grep -q "\[x\] bug-fix" body.txt; then
            tipo="bug-fix"
          else
            echo "Nenhuma opção marcada corretamente em 'tipo:'"
          fi
          
          echo "tipo=$tipo" >> "$GITHUB_OUTPUT"

      - name: Obter a última tag da release
        id: ultima
        run: |
          gh auth setup-git
          tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [[ -z "$tag" ]]; then tag="0.0.0"; fi
          echo "tag_atual=$tag" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Calcular nova tag
        id: nova_tag
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.ultima.outputs.tag_atual }}"
          case "${{ steps.tipo.outputs.tipo }}" in
            bug-fix)           patch=$((patch + 1));;
            nova-feature)      minor=$((minor + 1)); patch=0;;
            marco-no-projeto)  major=$((major + 1)); minor=0; patch=0;;
          esac
          nova_tag="${major}.${minor}.${patch}"
          echo "Nova tag: $nova_tag"
          echo "nova_tag=$nova_tag" >> "$GITHUB_OUTPUT"

# --------------------------------------------------------------------
# 2) RUN TESTS -------------------------------------------------------
# --------------------------------------------------------------------
  run-tests:
    name: 2. Rodar testes do backend
    runs-on: ubuntu-latest
    needs: prepare-tag
  
    steps:
      - uses: actions/checkout@v4
  
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
  
      - name: Instalar dependências
        working-directory: ./back
        run: npm ci
  
      - name: Rodar testes com cobertura
        working-directory: ./back
        run: npx jest --coverage --coverageReporters=json-summary
  
      - name: Verificar se arquivo de cobertura existe
        working-directory: ./back
        run: |
          if [ ! -f coverage/coverage-summary.json ]; then
            echo "❌ Arquivo coverage-summary.json não encontrado!"
            exit 1
          fi
  
      - name: Extrair cobertura total
        id: coverage
        working-directory: ./back
        run: |
          COVERAGE=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          echo "Cobertura total: $COVERAGE%"
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Atualizar badge no README
        run: |
          # Atualizar badge no README.md
          BADGE="![Coverage](https://img.shields.io/badge/Coverage-${{ steps.coverage.outputs.coverage }}%25-brightgreen)"
          sed -i '0,/<!-- COVERAGE_BADGE -->/s|.*<!-- COVERAGE_BADGE -->|'"$BADGE"' <!-- COVERAGE_BADGE -->|' README.md
        
          # Configurar autenticação com GitHub CLI
          echo "${{ secrets.GHCR_PAT }}" | gh auth login --with-token
        
          # Fazer commit e push via GitHub API
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/contents/README.md \
            -f message="ci: atualizar badge de cobertura para ${{ steps.coverage.outputs.coverage }}%" \
            -f content="$(base64 -w0 README.md)" \
            -f sha="$(gh api repos/${{ github.repository }}/contents/README.md --jq .sha)"

# --------------------------------------------------------------------
# 3) SONARQUBE ANALYSIS ----------------------------------------------
# --------------------------------------------------------------------
  sonarqube-analysis:
    name: 3. Analisar código com SonarQube
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependências
        working-directory: ./back
        run: npm ci

      - name: Rodar análise SonarQube
        working-directory: ./back
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        run: |
          npm install -g sonarqube-scanner
          npx sonar-scanner \
            -Dsonar.projectKey=${{ github.repository }}-back \
            -Dsonar.organization=${{ github.repository_owner }} \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

# --------------------------------------------------------------------
# 4) BUILD, SCAN & PUSH DOCKER IMAGE ---------------------------------
# --------------------------------------------------------------------
  docker-build-scan-push:
    name: 4. Build, Scan and Push Docker Image
    runs-on: ubuntu-latest
    needs: [prepare-tag, sonarqube-analysis]
    env:
      TAG: ${{ needs.prepare-tag.outputs.new_tag }}
      IMAGE_NAME: back-${{ github.event.repository.name }}
      REGISTRY: ghcr.io

    steps:
      - uses: actions/checkout@v4

      # Build Docker image
      - name: Injetar label de source no Dockerfile
        run: |
          echo "LABEL org.opencontainers.image.source=https://github.com/${{ github.repository }}" >> back/Dockerfile

      - name: Build Docker image
        run: |
          docker build ./back \
            -f back/Dockerfile \
            -t ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} \
            --build-arg REPO_URL="https://github.com/${{ github.repository }}"

      # Scan Docker image
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      # Push Docker image
      - name: Login no GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

# --------------------------------------------------------------------
# 5) CREATE RELEASE --------------------------------------------------
# --------------------------------------------------------------------
  create-release:
    name: 5. Criar release
    runs-on: ubuntu-latest
    needs: [docker-build-scan-push, prepare-tag]
    env:
      NEW_TAG: ${{ needs.prepare-tag.outputs.new_tag }}
      TIPO:    ${{ needs.prepare-tag.outputs.tipo }}
    steps:
      - uses: actions/checkout@v4

      - name: Publicar release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          generate_release_notes: true
          body: |
            Release gerada automaticamente a partir da Pull Request #${{ github.event.pull_request.number }}
            Tipo de mudança: ${{ env.TIPO }}
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_PAT }}
